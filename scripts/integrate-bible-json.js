// /**
//  * Ethiopian Bible JSON Integration Script
//  * 
//  * This script integrates the Ethiopian Bible JSON data with the website's Bible system.
//  * It loads the JSON file created by pdf-to-bible-json.js and creates the necessary
//  * database entries or file exports for use in the application.
//  * 
//  * Usage: 
//  * 1. First run pdf-to-bible-json.js to generate the ethiopian-bible.json file
//  * 2. Then run: node integrate-bible-json.js
//  */

// const fs = require('fs');
// const path = require('path');
// const { PrismaClient } = require('@prisma/client');

// // Configuration
// const JSON_FILE = path.join(__dirname, 'ethiopian-bible.json');
// const OUTPUT_JS_FILE = path.join(__dirname, 'ethiopian-bible-data.js');

// // Initialize Prisma client
// const prisma = new PrismaClient();

// // Main function to integrate Bible JSON data
// async function integrateBibleData() {
//   console.log('Integrating Ethiopian Bible data...');
  
//   try {
//     // Check if JSON file exists
//     if (!fs.existsSync(JSON_FILE)) {
//       console.error(`Error: JSON file not found - ${JSON_FILE}`);
//       console.error('Please run pdf-to-bible-json.js first to generate the JSON file.');
//       process.exit(1);
//     }
    
//     // Read the JSON file
//     const bibleJson = JSON.parse(fs.readFileSync(JSON_FILE, 'utf8'));
//     console.log(`Loaded Bible data with ${Object.keys(bibleJson).length} books`);
    
//     // Create database backup option
//     await createDatabaseEntries(bibleJson);
    
//     // Create JavaScript file export option
//     createJavaScriptExport(bibleJson);
    
//     console.log('Integration complete!');
    
//   } catch (error) {
//     console.error('Error integrating Bible data:', error);
//   } finally {
//     await prisma.$disconnect();
//   }
// }

// // Function to create database entries for the Bible verses
// async function createDatabaseEntries(bibleJson) {
//   console.log('Creating database entries...');
  
//   try {
//     // Get count of existing verses to avoid duplicates
//     const existingCount = await prisma.bibleVerse.count();
//     console.log(`Found ${existingCount} existing verses in database`);
    
//     let createdCount = 0;
//     let updatedCount = 0;
    
//     // Process each book, chapter, and verse
//     for (const book in bibleJson) {
//       for (const chapter in bibleJson[book]) {
//         for (const verse in bibleJson[book][chapter]) {
//           const verseText = bibleJson[book][chapter][verse];
          
//           // Check if verse already exists
//           const existingVerse = await prisma.bibleVerse.findFirst({
//             where: {
//               book,
//               chapter: parseInt(chapter),
//               verse: parseInt(verse)
//             }
//           });
          
//           if (existingVerse) {
//             // Update existing verse
//             await prisma.bibleVerse.update({
//               where: { id: existingVerse.id },
//               data: { text: verseText }
//             });
//             updatedCount++;
//           } else {
//             // Create new verse
//             await prisma.bibleVerse.create({
//               data: {
//                 book,
//                 chapter: parseInt(chapter),
//                 verse: parseInt(verse),
//                 text: verseText,
//                 language: 'en', // Assuming the text is in English
//                 source: 'Ethiopian Bible'
//               }
//             });
//             createdCount++;
//           }
          
//           // Show progress every 100 verses
//           if ((createdCount + updatedCount) % 100 === 0) {
//             console.log(`Progress: ${createdCount + updatedCount} verses processed`);
//           }
//         }
//       }
//     }
    
//     console.log(`Database integration complete. Created ${createdCount} new verses, updated ${updatedCount} existing verses.`);
    
//   } catch (error) {
//     console.error('Error creating database entries:', error);
//   }
// }

// // Function to create a JavaScript file with the Bible data
// function createJavaScriptExport(bibleJson) {
//   console.log('Creating JavaScript export file...');
  
//   // Create a JavaScript file that exports the Bible data
//   const jsContent = `/**
//  * Ethiopian Bible Data
//  * 
//  * Generated by integrate-bible-json.js
//  * This file contains the Ethiopian Bible data in a structured format.
//  */

// // Ethiopian Bible data as a JavaScript object
// const ETHIOPIAN_BIBLE_VERSES = ${JSON.stringify(bibleJson, null, 2)};

// // Export the data
// export default ETHIOPIAN_BIBLE_VERSES;
// `;

//   // Write the file
//   fs.writeFileSync(OUTPUT_JS_FILE, jsContent);
//   console.log(`JavaScript export created at: ${OUTPUT_JS_FILE}`);
// }

// // Run the main function
// integrateBibleData();
